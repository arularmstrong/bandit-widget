{"version":3,"file":"static/js/474.e0b40a85.chunk.js","mappings":"kLAOA,IAJe,SAAH,GAAsB,IAAbA,EAAK,iCACxB,OAAO,SAAC,KAAO,QAACC,UAAU,MAAMC,MAAM,OAAOC,WAAW,WAAWC,MAAM,QAAQC,KAAK,MAASL,GACjG,C,yTCIaM,EAAiB,CAC5BC,SAAU,WACVC,gBAAiB,kBACjBC,eAAgB,iBAChBC,QAAS,UACTC,YAAa,eAGf,SAASC,EAAQC,GACfC,QAAQC,MAAM,qBAAD,OAAsBF,GACrC,CAEA,SAASG,EAAgBH,GACvBD,EAAQC,EAEV,CAEA,OAAwCI,EAAAA,EAAAA,sBACtC,SAACC,GAAO,OAAK,IAAIC,EAAAA,QAAQ,CAAED,QAAAA,EAASE,OAAQC,EAAAA,GAAcC,eAAgB,GAAI,IAC/E,eACYC,EAAoB,CAC/BC,UAJgB,KAKhBC,MALkC,KAMlCC,KAAMpB,EAAeI,SAGvB,GAA0CO,EAAAA,EAAAA,sBACxC,SAACC,GAAO,OAAK,IAAIS,EAAAA,SAAS,CAAET,QAAAA,EAASN,QAASI,GAAkB,IACjE,eACYY,EAAqB,CAChCJ,UAJiB,KAKjBC,MALoC,KAMpCC,KAAMpB,EAAeC,UAGvB,GAA8CU,EAAAA,EAAAA,sBAAoB,SAACC,GAAO,OAAK,IAAIW,EAAAA,WAAW,CAAEX,QAAAA,GAAU,IAAC,eAC9FY,EAAuB,CAClCN,UAFmB,KAGnBC,MAHwC,KAIxCC,KAAMpB,EAAeK,aAGvB,GAAoDM,EAAAA,EAAAA,sBAAoB,SAACC,GAGpCa,OAAOC,QAAQX,EAAAA,IAAcY,QAC9D,SAACC,EAAI,GAAD,mBAAGC,EAAO,KAAEC,EAAI,8BACfF,GAAG,cACLC,EAAUC,EAAK,IAAE,GAEpB,CAAC,GAEH,OAAO,IAAIC,EAAAA,cAAc,CACvBnB,QAAAA,EACAoB,QAAS,CACPC,IAAKlB,EAAAA,GACLmB,QAAQ,GAEV5B,QAAAA,GAEJ,IAAE,eACW6B,EAA0B,CACrCjB,UApBsB,KAqBtBC,MArB8C,KAsB9CC,KAAMpB,EAAeG,gBAGvB,GAAsDQ,EAAAA,EAAAA,sBACpD,SAACC,GAAO,OACN,IAAIwB,EAAAA,eAAe,CACjBxB,QAAAA,EACAoB,QAAS,CACPK,IAAKtB,EAAAA,GAAauB,EAAAA,GAAAA,SAClBC,QAAS,SACTC,WAAY,kBACZC,oBAAoB,GAEtBnC,QAAAA,GACA,IACL,eAEYoC,EAA2B,CACtCxB,UAfuB,KAgBvBC,MAhBgD,KAiBhDC,KAAMpB,EAAeE,gB,qOCpFhB,SAASyC,IACd,MAAsB,qBAAXC,QACFC,QAAQD,OAAOE,SAI1B,CAEO,SAASC,IACsB,IAAD,IAAnC,MAAsB,qBAAXH,SACyB,QAAlC,EAAsB,QAAtB,EAAOA,OAAOE,gBAAQ,aAAf,EAAiBE,kBAAU,SAGtC,CAEO,SAASC,IACsB,IAAD,IAAnC,MAAsB,qBAAXL,SAC+B,QAAxC,EAAsB,QAAtB,EAAOA,OAAOE,gBAAQ,aAAf,EAAiBI,wBAAgB,SAG5C,CAMO,SAASC,IACd,MAAsB,qBAAXP,QACFC,QAAQD,OAAOQ,OAI1B,CAEO,SAASC,IACsB,IAAD,IAAnC,MAAsB,qBAAXT,QACFC,QAAc,QAAP,EAACD,cAAM,OAAQ,QAAR,EAAN,EAAQQ,cAAM,WAAR,EAAN,EAAgBE,UAInC,CAEA,IAAMC,EAAc,CAClB/B,EAAAA,GACAF,EAAAA,GACAoB,EAAAA,GACAP,EAAAA,GACAlB,EAAAA,IAGK,SAASuC,EAAcC,GAC5B,GAAKA,EAAL,CACA,GAAIA,GAAkB,kBAANA,EAAgB,CAC9B,IAAMC,EAAaH,EAAYI,MAAK,SAACD,GAAU,OAAKA,EAAWxC,YAAcuC,CAAC,IAC9E,IAAKC,EACH,MAAME,MAAM,yBAEd,OAAOF,CACT,CACE,OAAQD,GACN,KAAKzD,EAAAA,GAAAA,SACH,OAAOsB,EAAAA,GACT,KAAKtB,EAAAA,GAAAA,gBACH,OAAO0C,EAAAA,GACT,KAAK1C,EAAAA,GAAAA,eACH,OAAOmC,EAAAA,GACT,KAAKnC,EAAAA,GAAAA,QACH,OAAOiB,EAAAA,GACT,KAAKjB,EAAAA,GAAAA,YACH,OAAOwB,EAAAA,GAlBC,CAqBhB,CAEO,SAASqC,EAAkBC,GAA4E,IAA5DC,EAAoB,uDAAGhB,IACvE,OAAQe,GACN,KAAK9D,EAAAA,GAAAA,SACH,OAAO+D,EAAuB,WAAa,iBAC7C,KAAK/D,EAAAA,GAAAA,gBACH,MAAO,kBACT,KAAKA,EAAAA,GAAAA,eACH,MAAO,gBACT,KAAKA,EAAAA,GAAAA,QACH,MAAO,UACT,KAAKA,EAAAA,GAAAA,YACH,MAAO,cAEb,C,2MC9FMgE,GAAwB,eAC3B1B,EAAAA,GAAAA,QAA2B,qBAAkB,SAC7CA,EAAAA,GAAAA,OAA0B,WAAQ,SAClCA,EAAAA,GAAAA,QAA2B,gCAA6B,SACxDA,EAAAA,GAAAA,gBAAmC,gCAA6B,SAChEA,EAAAA,GAAAA,OAA0B,wBAAqB,SAC/CA,EAAAA,GAAAA,cAAiC,kBAAe,SAChDA,EAAAA,GAAAA,WAA8B,wBAAsB,GAG1C2B,GAAuB,eACjC3B,EAAAA,GAAAA,QAA2B,CAC1B4B,KAAM,mBACNC,IAAK,+BACLC,IAAK,qCACLC,SAAU,0BACX,SAEA/B,EAAAA,GAAAA,OAA0B,CACzB4B,KAAM,SACNC,IAAK,sCACLC,IAAK,qCACLC,SAAU,iCACX,SACA/B,EAAAA,GAAAA,QAA2B,CAC1B4B,KAAM,8BACNC,IAAK,8BACLC,IAAK,qCACLC,SAAU,yBACX,SACA/B,EAAAA,GAAAA,gBAAmC,CAClC4B,KAAM,8BACNC,IAAK,sCACLC,IAAK,qCACLC,SAAU,iCACX,SACA/B,EAAAA,GAAAA,WAA8B,CAC7B4B,KAAM,uBACNC,IAAK,GACLC,IAAK,GACLC,SAAU,8CACX,SACA/B,EAAAA,GAAAA,OAA0B,CACzB4B,KAAM,SACNC,IAAK,GACLC,IAAK,MACN,SACA9B,EAAAA,GAAAA,cAAiC,CAChC4B,KAAM,gBACNC,IAAK,GACLC,IAAK,KACN,GAQUrD,GAAY,eACtBuB,EAAAA,GAAAA,QAAwB,2EACxBA,EAAAA,GAAAA,OAAuB,0EACvBA,EAAAA,GAAAA,WAA2B,6CAC3BA,EAAAA,GAAAA,QAAwB,8CACxBA,EAAAA,GAAAA,gBAAgC,qDAUtBgC,GARuB,eACjChC,EAAAA,GAAAA,QAAwB,2EACxBA,EAAAA,GAAAA,OAAuB,0EACvBA,EAAAA,GAAAA,QAAwB,8CACxBA,EAAAA,GAAAA,WAA2B,6CAC3BA,EAAAA,GAAAA,gBAAgC,kDAGT,eACvBA,EAAAA,GAAAA,QAA2B,CAE1B,kCACA,6BAEA,2BACA,4CACD,SAEAA,EAAAA,GAAAA,OAA0B,CAEzB,iCAEA,oCACD,GAGUiC,GAAgC,eAC1CjC,EAAAA,GAAAA,QAA2BkC,mBAAmB,cAAW,SACzDlC,EAAAA,GAAAA,OAA0BkC,mBAAmB,YAAS,SACtDlC,EAAAA,GAAAA,QAA2BkC,mBAAmB,aAAU,SACxDlC,EAAAA,GAAAA,gBAAmCkC,mBAAmB,qBAAkB,SACxElC,EAAAA,GAAAA,OAA0BkC,mBAAmB,YAAS,SACtDlC,EAAAA,GAAAA,cAAiCkC,mBAAmB,mBAAgB,SACpElC,EAAAA,GAAAA,WAA8BkC,mBAAmB,iBAAe,E,4IC/FtDC,EAAU,SAACC,EAASC,EAAKvD,GACpC,MAAgB,WAAZsD,GAAoC,OAAZA,EACnB,CACLzC,KAAK2C,EAAAA,EAAAA,eAAc,UACnBC,cAAe,gCACfC,mBAAmBF,EAAAA,EAAAA,eAAc,UACjCP,SAAS,sBAAD,OAAwBjD,EAAI,YAAIuD,EAAG,oBAExB,iBAAZD,GAA0C,OAAZA,EAChC,CACLzC,KAAK2C,EAAAA,EAAAA,eAAc,gBACnBC,cAAe,+BACfC,mBAAmBF,EAAAA,EAAAA,eAAc,gBACjCP,SAAS,sBAAD,OAAwBjD,EAAI,YAAIuD,IAGnC,CACL1C,IAAK,wBACL4C,cAAe,gCACfC,mBAAmBF,EAAAA,EAAAA,eAAc,UACjCP,SAAS,sBAAD,OAAwBjD,EAAI,YAAIuD,EAAG,mBAGjD,EAoEA,IAlEoB,SAACI,GACnB,IAAMC,GAAgBC,EAAAA,EAAAA,KAChBC,GAAQC,EAAAA,EAAAA,KACd,GAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnCV,EAAO,KAAEW,EAAU,KAC1B,GAAgCD,EAAAA,EAAAA,UAAS,MAAK,eAAvCE,EAAQ,KAAEC,EAAW,MAE5BC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAWC,aAAaC,QAAQ,YAAc,SACpDN,EAAWI,GACXF,EACEK,EAAAA,EAAAA,KAAc,IAAIC,EAAAA,WAAWpB,EAAQgB,GAAUxD,MAAM6D,KAAIC,EAAAA,EAAAA,GAAsBf,IAWnF,GAAG,CAACA,IAEJ,IAAMgB,GAAOC,EAAAA,EAAAA,cAAY,SAACC,GACxB,MAAiB,iBAAVA,CACT,GAAG,IAEGC,GAAkBF,EAAAA,EAAAA,aAAW,yCACjC,WAAOG,GAAU,gFACuB,GAAhCC,EAAO,IAAIC,EAAAA,UAAUF,GACtBd,EAAS,CAAD,wCAAS,MAAI,gCAENA,EAASiB,gBAAgBC,cAAc,CAAEC,QAASJ,IAAO,OAMzE,OANIK,EAAG,OAETxB,EAAM,CACJyB,MAAO,mBACPC,OAAQ,UACRC,SAAU,MACV,kBACKH,GAAG,6DAGUpB,EAASwB,kBAAkBN,cAAc,CAAEC,QAASJ,IAAO,QAApE,OAAHK,EAAG,yBAMFA,GAAG,QAOR,MAPQ,2BAEVxB,EAAM,CACJyB,MAAO,aACPI,YAAa,sCACbH,OAAQ,QACRC,SAAU,MACV,uEAIP,mDAhCgC,GAiCjC,CAACvB,EAAUJ,IAGb,MAAO,CAAEI,SAAAA,EAAUa,gBAAAA,EAAiBH,KAAAA,EAAMvB,QAAAA,EAASC,QAAAA,EACrD,C,iVCNMsC,EAAW,yCAAG,WAAON,EAAKhD,EAAYsC,EAAMiB,EAAW3B,GAAQ,kGAOnE,GANI4B,EAAS,OAOTlB,EAAKU,EAAIR,OAAO,CAAD,oBACbQ,EAAIS,WAAWC,OAAOC,WAAW,CAAD,eACuD,OAAzFC,EAAQZ,EAAIS,WAAWC,OAAOC,WAAWE,OAAOC,YAAYC,WAAaC,EAAAA,iBAAgB,SAElEhE,EAAWiE,WAAWV,GAAU,OAAzC,QACEP,EAAIS,WAAWC,OAAOC,WAAWE,OAAOC,YAAYC,YAClEG,EAAc,uBACdC,GAAmB,IAEnBD,EAAc,OACdC,GAAmB,GACpB,WAGCnB,EAAIS,WAAWC,OAAOU,aAAa,CAAD,gBAGpB,OAFhBR,EAAQZ,EAAIS,WAAWC,OAAOU,aAAaP,OAAOC,YAAYC,WAAaC,EAAAA,iBACrEK,EAAOrB,EAAIS,WAAWC,OAAOU,aAAaC,KAChDC,EAAYD,EAAI,UACU,OAARzC,QAAQ,IAARA,OAAQ,EAARA,EAAU2C,OAAOC,WAAW,CAC5CC,YAAaJ,IACb,QAE+B,OAJ3BK,EAAG,OAGTC,EAAoBD,EACpBlB,EAASkB,EAAIE,OAAOC,cAAa,UACL7E,EAAW8E,8BAA8BvB,EAAW,CAAEc,KAAMA,IAAO,QAA5E,GACgB,IADhB,OACDU,MAAMC,OAAY,iBAClCd,EAAc,kBACdC,GAAmB,EAAI,0CAEIc,EAAAA,EAAAA,IAA0BZ,EAAMd,GAAU,QAAnD,OAAZ2B,EAAY,iBACSlF,EAAWmF,uBAAuBD,GAAa,QAAxD,OAEHH,MAAMK,SACnBpC,EAAIS,WAAWC,OAAOU,aAAaP,OAAOC,YAAYC,WAAaC,EAAAA,kBAEnEE,EAAc,4BACdC,GAAmB,IAEnBD,EAAc,OACdC,GAAmB,GACpB,oCAIDnB,EAAIqC,iBAAiB,CAAD,gBAGtB,OAFAf,EAAYtB,EAAIqC,iBAEhB,UAC0B,OAARzD,QAAQ,IAARA,OAAQ,EAARA,EAAU2C,OAAOC,WAAW,CAAEC,YAAazB,EAAIqC,mBAAmB,QAGnD,OAH3BX,EAAG,OACTC,EAAoBD,EAEpBlB,EAASkB,EAAIE,OAAOC,cAAa,UACL7E,EAAW8E,8BACrCvB,EAEA,CAAEc,KAAMrB,EAAIqC,mBACb,QAJkB,GAKgB,IALhB,OAKDN,MAAMC,OAAY,iBAClCd,EAAc,kBACdC,GAAmB,EAAI,wBAEqC,OAA5DP,GAAW,OAAHZ,QAAG,IAAHA,OAAG,EAAHA,EAAKY,MAAME,YAAYC,YAAaC,EAAAA,iBAAgB,WACjCiB,EAAAA,EAAAA,IAA0BjC,EAAIqC,iBAAkB9B,GAAU,QAAnE,OAAZ2B,EAAY,iBACSlF,EAAWmF,uBAAuBD,GAAa,QAAxD,OACDH,MAAMK,UAAc,OAAHpC,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAKY,aAAK,WAAP,EAAH,EAAYE,YAAYC,YAAaC,EAAAA,kBACrEE,EAAc,4BACdC,GAAmB,IAEnBD,EAAc,OACdC,GAAmB,GACpB,gCAGyD,OAA5DP,GAAW,OAAHZ,QAAG,IAAHA,OAAG,EAAHA,EAAKY,MAAME,YAAYC,YAAaC,EAAAA,iBAAgB,UACrChE,EAAWiE,WAAWV,GAAU,QAAzC,SACK,OAAHP,QAAG,IAAHA,OAAG,EAAHA,EAAKY,MAAME,YAAYC,aACrCG,EAAc,4BACdC,GAAmB,IAEnBD,EAAc,OACdC,GAAmB,GACpB,iCAGE,CAAEX,OAAAA,EAAQI,MAAAA,EAAOM,YAAAA,EAAaC,iBAAAA,EAAkBG,UAAAA,EAAWK,kBAAAA,IAAmB,4CACtF,gBA5FgB,8CA8FjB,EAhLsB,SAACW,EAAcC,EAAWC,GAC9C,OAA8C9D,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAnD+D,EAAe,KAAEC,EAAkB,KAC1C,GAA4ChE,EAAAA,EAAAA,UAAS,MAAK,eAAnDiE,EAAc,KAAEC,EAAiB,KACxC,GAAoBlE,EAAAA,EAAAA,UAAS,MAAK,eAA3BmE,EAAE,KAAEC,EAAK,KACR9F,GAAe+F,EAAAA,EAAAA,KAAf/F,WACFsB,GAAgBC,EAAAA,EAAAA,KAEtB,GAAgCG,EAAAA,EAAAA,WAAS,GAAK,eAAvCsE,EAAS,KAAEC,EAAU,KAE5B,GAAqDC,EAAAA,EAAAA,KAA7CzD,EAAe,EAAfA,gBAAiBb,EAAQ,EAARA,SAAUU,EAAI,EAAJA,KAAa,EAAPtB,QAsEzC,OApEAc,EAAAA,EAAAA,YAAU,WACR,IAAQqE,EAAoEX,EAApEW,gBAAiBhI,EAAmDqH,EAAnDrH,QAASiI,EAA0CZ,EAA1CY,UAAU,EAAgCZ,EAA/Ba,aAAAA,OAAY,MAAG,OAAM,EAAEC,EAAQd,EAARc,IAEtC,aAoB7B,OApB6B,0BAA9B,+FAEoB,OAFpB,SAEIL,GAAW,GAAK,UACSM,EAAAA,EAAAA,IAAkBhB,EAAWD,GAAa,OAA7DE,EAAU,OAEhBE,EAAmB,CACjBS,gBAA2B,OAAVX,QAAU,IAAVA,GAAoB,QAAV,EAAVA,EAAYgB,gBAAQ,WAAV,EAAV,EAAsBL,gBACvChI,QAAmB,OAAVqH,QAAU,IAAVA,GAAoB,QAAV,EAAVA,EAAYgB,gBAAQ,WAAV,EAAV,EAAsBrI,QAC/BiI,UAAWZ,EAAWiB,MAAM7C,MAAMmB,MAClC2B,cAAelB,EAAWiB,MAAM7C,MAAM+C,KACtCN,aAAcb,EAAWgB,SAASH,aAClCC,IAAKd,EAAWgB,SAASF,IACzBM,QAASpB,EAAWoB,UAEtBhB,EAA4B,OAAVJ,QAAU,IAAVA,GAAoB,QAAV,EAAVA,EAAYgB,gBAAQ,WAAV,EAAV,EAAsBb,gBAAe,gDAEvD7I,QAAQ+J,IAAI,0DAAD,OAA2DvB,IAAe,QAEpE,OAFoE,UAErFW,GAAW,GAAM,6EAEpB,sBAEGX,EAxBkF,WAExD,wBAuB5BwB,IAEApB,EAAmB,CACjBS,gBAAAA,EACAhI,QAAAA,EACAiI,UAAAA,EACAC,aAAAA,EACAC,IAAAA,IAEFL,GAAW,GAEf,GAAG,CAACX,EAAcC,EAAWC,KAE7B1D,EAAAA,EAAAA,YAAU,WAC6B,aAwBpC,OAxBoC,0BAArC,iGAC6B,KAArBa,EAAOgD,KAED/D,EAAQ,0CAEEa,EAAgBE,GAAK,OAA9B,OAAHoE,EAAG,gBACoFzD,EAC3FyD,EACA/G,EACAsC,EACAhB,EAAciC,UACd3B,GACD,gBANO4B,EAAM,EAANA,OAAQI,EAAK,EAALA,MAAkB,EAAXM,YAA6B,EAAhBC,iBAA2B,EAATG,UAA4B,EAAjBK,kBAOjEe,GAAmB,SAACsB,GAAK,yBACpBA,GAAK,IACRZ,UAAWxC,EACX8C,cAAelD,GAAM,IAEvBsC,EAAMiB,GAAI,kDAEVd,GAAW,GACXnJ,QAAQ+J,IAAI,EAAD,IAAG,2DAGnB,uBAzBc,WACsB,wBAyBrCI,EACF,GAAG,CAACtB,EAAgBlD,EAAiBb,EAAUN,EAAciC,YAEtD,CAAEkC,gBAAAA,EAAiBO,UAAAA,EAAWH,GAAAA,EACvC,E,4CCnFaqB,EAAKC,EAAAA,EAAAA,IAAU,iRAUfC,EAAWD,EAAAA,EAAAA,IAAU,4GAMrBE,GAAcF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAW,0PAWzBI,GAAcJ,EAAAA,EAAAA,GAAOK,EAAAA,EAAPL,CAAY,4SACb,YAAQ,SAALM,MAAkBC,OAAOC,MAAM,IAa/CC,GAAkBT,EAAAA,EAAAA,GAAOU,EAAAA,EAAPV,CAAiB,gI,sBCzCG,SAEpCW,EAAQ,GAAD,4CAUrB,OAVqB,0BAAtB,WAAuBtK,GAAS,mFAExBA,EAAUuK,eAAe,CAAD,+BACpBvK,EAAUuK,iBAAgB,6CAE1BvK,EAAUwK,WAAU,yDAG5BlL,QAAQC,MAAM,sCAAD,cAA+C,2DAE/D,sB,eCXKkL,EAAqB,CAAC3L,EAAAA,GAAAA,SAAyBA,EAAAA,GAAAA,gBAAgCA,EAAAA,GAAAA,gB,eCGtE,SAAS4L,EAAa,GAAe,IAAbC,EAAQ,EAARA,UACpBC,EAAAA,EAAAA,OFSJ,WACb,IAIIC,EAJEC,GAAWF,EAAAA,EAAAA,MAEXG,GAAiBC,EAAAA,EAAAA,KAAY,SAACxB,GAAK,OAAKA,EAAMyB,KAAKF,cAAc,IAGvE,GAAIA,EACF,IACEF,GAAqBvI,EAAAA,EAAAA,IAAcyI,EAGrC,CAFE,SACAD,GAASI,EAAAA,EAAAA,IAAqB,CAAEC,YAAQC,IAC1C,EAGF9G,EAAAA,EAAAA,YAAU,WACRgG,EAAQhK,EAAAA,GAAAA,WACRgK,EAAQvK,EAAAA,GAAAA,WAEJ8K,GACFP,EAAQO,EAAmB7K,UAE/B,GAAG,GACL,CEtBEqL,GACA,IAAMC,EDZO,WACb,IAAMP,GAAiBC,EAAAA,EAAAA,KAAY,SAACxB,GAAK,OAAKA,EAAMyB,KAAKF,cAAc,IACvE,OAAOQ,EAAAA,EAAAA,UAAQ,WACb,IAAMC,EAAyB,GAc/B,OAXAA,EAAuBC,KAAK3M,EAAAA,GAAAA,aAGxBiM,GACFS,EAAuBC,KAAKV,GAE9BS,EAAuBC,KAAI,MAA3BD,GAAsB,OAASf,EAAmBiB,QAAO,SAACP,GAAM,OAAKA,IAAWJ,CAAc,MAG9FS,EAAuBC,KAAK3M,EAAAA,GAAAA,SAErB0M,EAAuB9K,IAAI4B,EAAAA,GACpC,GAAG,CAACyI,GACN,CCPsBY,GACdC,EAAaN,EAAY5K,KAAI,gBAAGT,EAAK,EAALA,MAAgB,MAAO,CAAP,EAATD,UAA4BC,EAAM,IAEzEiD,GAAMqI,EAAAA,EAAAA,UAAQ,kBAAMD,EAAY5K,KAAI,gBAAGR,EAAI,EAAJA,KAAI,OAAOyC,EAAAA,EAAAA,IAAkBzC,EAAK,IAAE2L,KAAK,IAAI,GAAE,CAACP,IAE7F,OACE,SAAC,EAAAQ,kBAAiB,CAACF,WAAYA,EAAW,SACvCjB,GAD6CzH,EAIpD,C,2DCCA,GAvBuB,SAAH,GAAsB,IAAhByH,EAAQ,EAARA,SAElBnH,EAAUuI,EAAAA,EAAAA,OAGVC,GAAWT,EAAAA,EAAAA,UAAQ,kBAAM7H,EAAAA,EAAAA,eAAcF,EAAQ,GAAE,CAACA,IAClDyI,GAAUV,EAAAA,EAAAA,UACd,iBAAM,CACJ,IAAIW,EAAAA,GAA0B,CAC5BC,YAAa,CAAEnJ,KAAM,6BACrBoJ,0BAA0BC,EAAAA,EAAAA,QAE5B,IAAIC,EAAAA,EACL,GACD,CAAC9I,IAEH,OACE,SAAC+I,EAAA,EAAkB,CAACP,SAAUA,EAAS,UACrC,SAACQ,EAAA,EAAc,CAACP,QAASA,EAAQ,SAAEtB,KAGzC,ECfA,GARkB,SAAH,GAAsB,IAAhBA,EAAQ,EAARA,SACnB,OACE,SAAC,GAAc,WACb,SAACD,EAAY,UAAEC,KAGrB,ECEM8B,IAASC,EAAAA,EAAAA,OAAK,kBAAM,4BAAkB,IACtCC,IAAoBD,EAAAA,EAAAA,OAAK,kBAAM,qDAAwD,IACvFE,IAAcF,EAAAA,EAAAA,OAAK,kBAAM,qDAAsC,IAC/DG,IAAgBH,EAAAA,EAAAA,OAAK,kBAAM,8BAAyB,IAapDI,GAAO,SAAH,GAAwE,IAAlEC,EAAO,EAAPA,QAASjF,EAAY,EAAZA,aAAcC,EAAS,EAATA,UAAWiF,EAAY,EAAZA,aAAchF,EAAU,EAAVA,WAE9D,IADuBgD,EAAAA,EAAAA,KAAY,SAACxB,GAAK,OAAKA,EAAMyB,KAAKF,cAAc,KACjC7G,EAAAA,EAAAA,WAAS,IAAM,eAA9C+I,EAAW,KAAEC,EAAc,KAClC,GAA+BC,EAAAA,EAAAA,gBAAvBC,EAAO,EAAPA,QAASpN,EAAS,EAATA,UACjB,GAAiD+D,EAAAA,EAAAA,KAA9BsJ,EAAa,EAAxBtH,UAA0BuH,EAAU,EAAVA,WAClC,EAA2CC,EAAczF,EAAcC,EAAWC,GAA1EC,EAAe,EAAfA,gBAAiBO,EAAS,EAATA,UAAWH,EAAE,EAAFA,GAE9ByC,GAAWF,EAAAA,EAAAA,MAETjK,EAAYsH,EAAZtH,QAcF6M,EAAuB,WAC3BN,GAAe,EACjB,EAkCMO,EAAW,CAAC,KAAM,MAAMC,SAAS/M,GAEjCgN,EAAqBN,EAAgBA,EAAcO,WAAa,GAEtE,OACE,SAAClE,EAAE,WACD,SAACE,EAAQ,WACP,UAACC,EAAW,CAACgE,GAAG,aAAY,WACxBJ,EAAWE,EAAmBP,KAC9B,SAAC,IAAM,CAACU,GAAI,EAAGC,QAAQ,aAAY,UACjC,UAAC,KAAG,CAAClP,KAAM,KAAiBmP,aAAa,OAAOC,QAAQ,UAAUC,YAAY,OAAM,WAClF,SAAC,KAAQ,UAAET,GAAWU,EAAAA,EAAAA,IAAgBR,EAAkB,IAAKQ,EAAAA,EAAAA,IAAgBf,EAAS,MACtF,SAAC,KAAc,CAACgB,QAASX,EAAWH,EA7CtB,WAC1B,IACMtN,EAAUqO,WACZrO,EAAUqO,aAEVrO,EAAUsO,aAEZxD,GAASI,EAAAA,EAAAA,IAAqB,CAAEC,YAAQC,IAG1C,CAFE,MAAOmD,GACPjP,QAAQ+J,IAAIkF,EACd,CACF,MAgCkC,SAM1B,SAACnE,EAAe,CAACgE,QAhEJ,WACbrB,GACJA,GAQJ,KAuDQ,UAAC,KAAG,CAACc,GAAG,aAAaW,OAAO,OAAOC,MAAM,OAAOC,KAAK,IAAIC,GAAI,OAAO,UACjEnG,IApCP,SAAC,IAAI,CAACuF,QAAQ,SAASa,MAAM,SAASJ,OAAO,QAAO,UAClD,SAACK,EAAA,EAAM,OAqCDrG,GAjCO,WACjB,IAAMiF,EAAW,CAAC,KAAM,MAAMC,SAAS/M,GACvC,OAAK8M,GAAYJ,IAAoBI,GAAYL,GACxC,SAACX,GAAM,CAACxE,gBAAiBA,EAAiBI,GAAIA,IAC5CoF,IAAaJ,GAAiBJ,GAChC,SAACN,GAAiB,KACfS,GAAWH,GACd,SAACL,GAAW,KAEZ,SAACC,GAAa,CAACW,qBAAsBA,EAAsBR,aAAcA,GAEpF,CAsByB8B,OAGjB,SAAC/E,EAAW,CAAC8D,GAAG,aAAY,UAC1B,UAAC,IAAI,CAACkB,WAAW,SAAQ,WACvB,SAAC,IAAK,CAACC,IAAI,8BAA8BP,MAAO,OAAQD,OAAQ,OAAQS,IAAI,MAC5E,SAAC,IAAI,CAACC,KAAM,IAAI,UACd,SAAC,IAAI,CAACC,SAAU,GAAIC,GAAI,EAAE,SAAC,2CAU3C,EAEA,GA7GiB,SAAC5Q,GAChB,OAAKA,EAAM6Q,UAIT,UAAC,GAAS,YACR,SAACvC,IAAI,UAAKtO,IAAU,OAJf,IAOX,C","sources":["components/Loader/index.js","connection/index.js","connection/utils.js","constants/network.js","hooks/useMetaplex.js","widgets/Mint/Widget/hooks/useCollection.js","widgets/Mint/styles.js","hooks/useEagerlyConnect.js","hooks/useOrderedConnections.js","components/Web3Provider/index.jsx","components/SolanaProvider/index.js","widgets/Mint/Providers.js","widgets/Mint/index.js"],"sourcesContent":["import React from 'react'\nimport { Spinner } from '@chakra-ui/react'\n\nconst Loader = ({ ...props }) => {\n  return <Spinner thickness=\"4px\" speed=\"1.5s\" emptyColor=\"gray.200\" color=\"black\" size=\"xl\" {...props} />\n}\n\nexport default Loader\n","import { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { initializeConnector } from '@web3-react/core'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\nimport { MetaMask } from '@web3-react/metamask'\nimport { Network } from '@web3-react/network'\nimport { WalletConnect } from '@web3-react/walletconnect'\nimport { NETWORK_URLS } from '../constants/network'\nimport { SupportedChainId } from '../constants/chains'\n\nexport const ConnectionType = {\n  INJECTED: 'INJECTED',\n  COINBASE_WALLET: 'COINBASE_WALLET',\n  WALLET_CONNECT: 'WALLET_CONNECT',\n  NETWORK: 'NETWORK',\n  GNOSIS_SAFE: 'GNOSIS_SAFE',\n}\n\nfunction onError(error) {\n  console.debug(`web3-react error: ${error}`)\n}\n\nfunction onMetamaskError(error) {\n  onError(error)\n  // metaMaskErrorHandler?.(error)\n}\n\nconst [web3Network, web3NetworkHooks] = initializeConnector(\n  (actions) => new Network({ actions, urlMap: NETWORK_URLS, defaultChainId: 1 }),\n)\nexport const networkConnection = {\n  connector: web3Network,\n  hooks: web3NetworkHooks,\n  type: ConnectionType.NETWORK,\n}\n\nconst [web3Injected, web3InjectedHooks] = initializeConnector(\n  (actions) => new MetaMask({ actions, onError: onMetamaskError }),\n)\nexport const injectedConnection = {\n  connector: web3Injected,\n  hooks: web3InjectedHooks,\n  type: ConnectionType.INJECTED,\n}\n\nconst [web3GnosisSafe, web3GnosisSafeHooks] = initializeConnector((actions) => new GnosisSafe({ actions }))\nexport const gnosisSafeConnection = {\n  connector: web3GnosisSafe,\n  hooks: web3GnosisSafeHooks,\n  type: ConnectionType.GNOSIS_SAFE,\n}\n\nconst [web3WalletConnect, web3WalletConnectHooks] = initializeConnector((actions) => {\n  // Avoid testing for the best URL by only passing a single URL per chain.\n  // Otherwise, WC will not initialize until all URLs have been tested (see getBestUrl in web3-react).\n  const RPC_URLS_WITHOUT_FALLBACKS = Object.entries(NETWORK_URLS).reduce(\n    (map, [chainId, urls]) => ({\n      ...map,\n      [chainId]: urls[0],\n    }),\n    {},\n  )\n  return new WalletConnect({\n    actions,\n    options: {\n      rpc: NETWORK_URLS,\n      qrcode: true,\n    },\n    onError,\n  })\n})\nexport const walletConnectConnection = {\n  connector: web3WalletConnect,\n  hooks: web3WalletConnectHooks,\n  type: ConnectionType.WALLET_CONNECT,\n}\n\nconst [web3CoinbaseWallet, web3CoinbaseWalletHooks] = initializeConnector(\n  (actions) =>\n    new CoinbaseWallet({\n      actions,\n      options: {\n        url: NETWORK_URLS[SupportedChainId.MAINNET],\n        appName: 'Bandit',\n        appLogoUrl: 'BANDIT_LOGO_URL',\n        reloadOnDisconnect: false,\n      },\n      onError,\n    }),\n)\n\nexport const coinbaseWalletConnection = {\n  connector: web3CoinbaseWallet,\n  hooks: web3CoinbaseWalletHooks,\n  type: ConnectionType.COINBASE_WALLET,\n}\n","import {\n  coinbaseWalletConnection,\n  ConnectionType,\n  gnosisSafeConnection,\n  injectedConnection,\n  networkConnection,\n  walletConnectConnection,\n} from '../connection'\n\nexport function getIsInjected() {\n  if (typeof window !== 'undefined') {\n    return Boolean(window.ethereum)\n  }\n\n  return false\n}\n\nexport function getHasMetaMaskExtensionInstalled() {\n  if (typeof window !== 'undefined') {\n    return window.ethereum?.isMetaMask ?? false\n  }\n  return false\n}\n\nexport function getHasCoinbaseExtensionInstalled() {\n  if (typeof window !== 'undefined') {\n    return window.ethereum?.isCoinbaseWallet ?? false\n  }\n  return false\n}\n\nexport function getIsMetaMask(connectionType) {\n  return connectionType === ConnectionType.INJECTED && getHasMetaMaskExtensionInstalled()\n}\n\nexport function getIsSolanaInjected() {\n  if (typeof window !== 'undefined') {\n    return Boolean(window.solana)\n  }\n\n  return false\n}\n\nexport function getHasPhantomExtensionInstalled() {\n  if (typeof window !== 'undefined') {\n    return Boolean(window?.solana?.isPhantom)\n  }\n\n  return false\n}\n\nconst CONNECTIONS = [\n  gnosisSafeConnection,\n  injectedConnection,\n  coinbaseWalletConnection,\n  walletConnectConnection,\n  networkConnection,\n]\n\nexport function getConnection(c) {\n  if (!c) return\n  if (c && typeof c !== 'string') {\n    const connection = CONNECTIONS.find((connection) => connection.connector === c)\n    if (!connection) {\n      throw Error('unsupported connector')\n    }\n    return connection\n  } else {\n    switch (c) {\n      case ConnectionType.INJECTED:\n        return injectedConnection\n      case ConnectionType.COINBASE_WALLET:\n        return coinbaseWalletConnection\n      case ConnectionType.WALLET_CONNECT:\n        return walletConnectConnection\n      case ConnectionType.NETWORK:\n        return networkConnection\n      case ConnectionType.GNOSIS_SAFE:\n        return gnosisSafeConnection\n    }\n  }\n}\n\nexport function getConnectionName(connectionType, hasMetaMaskExtension = getHasMetaMaskExtensionInstalled()) {\n  switch (connectionType) {\n    case ConnectionType.INJECTED:\n      return hasMetaMaskExtension ? 'MetaMask' : 'Browser Wallet'\n    case ConnectionType.COINBASE_WALLET:\n      return 'Coinbase Wallet'\n    case ConnectionType.WALLET_CONNECT:\n      return 'WalletConnect'\n    case ConnectionType.NETWORK:\n      return 'Network'\n    case ConnectionType.GNOSIS_SAFE:\n      return 'Gnosis Safe'\n  }\n}\n","import { SupportedChainId } from './chains'\n\nconst SUPPORTED_NETWORKS_NAMES = {\n  [SupportedChainId.MAINNET]: 'Ethereum mainnet',\n  [SupportedChainId.GOERLI]: 'Goerli',\n  [SupportedChainId.BINANCE]: 'Binance smart chain mainnet',\n  [SupportedChainId.BINANCE_TESTNET]: 'Binance smart chain testnet',\n  [SupportedChainId.SOLANA]: 'Solana mainnet beta',\n  [SupportedChainId.SOLANA_DEVNET]: 'Solana devnet',\n  [SupportedChainId.SHARDEUM20]: 'Shardeum Liberty 2.0',\n}\n\nexport const SUPPORTED_NETWORKS_INFO = {\n  [SupportedChainId.MAINNET]: {\n    name: 'Ethereum mainnet',\n    api: 'https://api.etherscan.io/api',\n    key: '7GJC7W52P7BJ3ESQCBGG2YP3M597M69ZEC',\n    explorer: 'https://etherscan.io',\n  },\n\n  [SupportedChainId.GOERLI]: {\n    name: 'Goerli',\n    api: 'https://api-goerli.etherscan.io/api',\n    key: '7GJC7W52P7BJ3ESQCBGG2YP3M597M69ZEC',\n    explorer: 'https://goerli.etherscan.io',\n  },\n  [SupportedChainId.BINANCE]: {\n    name: 'Binance smart chain mainnet',\n    api: 'https://api.bscscan.com/api',\n    key: '3THBPRKH4RNSF4KF52JFAJZX92SHX2FUIV',\n    explorer: 'https://bscscan.com',\n  },\n  [SupportedChainId.BINANCE_TESTNET]: {\n    name: 'Binance smart chain testnet',\n    api: 'https://api-testnet.bscscan.com/api',\n    key: '3THBPRKH4RNSF4KF52JFAJZX92SHX2FUIV',\n    explorer: 'https://testnet.bscscan.com',\n  },\n  [SupportedChainId.SHARDEUM20]: {\n    name: 'Shadreum liberty 2.0',\n    api: '',\n    key: '',\n    explorer: 'https://explorer-liberty20.shardeum.org/',\n  },\n  [SupportedChainId.SOLANA]: {\n    name: 'Solana',\n    api: '',\n    key: '',\n  },\n  [SupportedChainId.SOLANA_DEVNET]: {\n    name: 'Solana devnet',\n    api: '',\n    key: '',\n  },\n}\n\nconst INFURA_KEY = process.env.NEXT_PUBLIC_INFURA_KEY\n\n/**\n * These are the network URLs used by the interface when there is not another available source of chain data\n */\nexport const NETWORK_URLS = {\n  [SupportedChainId.MAINNET]: `https://mainnet.infura.io/v3/3e34307cdece46d9a15cce3d2a7525a2`,\n  [SupportedChainId.GOERLI]: `https://goerli.infura.io/v3/3e34307cdece46d9a15cce3d2a7525a2`,\n  [SupportedChainId.SHARDEUM20]: `https://liberty20.shardeum.org/`,\n  [SupportedChainId.BINANCE]: `https://bsc-dataseed.binance.org`,\n  [SupportedChainId.BINANCE_TESTNET]: `https://data-seed-prebsc-1-s1.binance.org:8545`,\n}\nexport const NETWORK_URLS_FOR_WALLET = {\n  [SupportedChainId.MAINNET]: `https://mainnet.infura.io/v3/3e34307cdece46d9a15cce3d2a7525a2`,\n  [SupportedChainId.GOERLI]: `https://goerli.infura.io/v3/3e34307cdece46d9a15cce3d2a7525a2`,\n  [SupportedChainId.BINANCE]: `https://bsc-dataseed.binance.org`,\n  [SupportedChainId.SHARDEUM20]: `https://liberty20.shardeum.org/`,\n  [SupportedChainId.BINANCE_TESTNET]: `https://data-seed-prebsc-1-s1.binance.org:8545`,\n}\n\nexport const FALLBACK_URLS = {\n  [SupportedChainId.MAINNET]: [\n    // \"Safe\" URLs\n    'https://api.mycryptoapi.com/eth',\n    'https://cloudflare-eth.com',\n    // \"Fallback\" URLs\n    'https://rpc.ankr.com/eth',\n    'https://eth-mainnet.public.blastapi.io',\n  ],\n\n  [SupportedChainId.GOERLI]: [\n    // \"Safe\" URLs\n    'https://rpc.goerli.mudit.blog/',\n    // \"Fallback\" URLs\n    'https://rpc.ankr.com/eth_goerli',\n  ],\n}\n\nexport const CHAIN_IDS_TO_NAMES_URL_COMPONENT = {\n  [SupportedChainId.MAINNET]: encodeURIComponent('ethereum'),\n  [SupportedChainId.GOERLI]: encodeURIComponent('goerli'),\n  [SupportedChainId.BINANCE]: encodeURIComponent('binance'),\n  [SupportedChainId.BINANCE_TESTNET]: encodeURIComponent('binance testnet'),\n  [SupportedChainId.SOLANA]: encodeURIComponent('solana'),\n  [SupportedChainId.SOLANA_DEVNET]: encodeURIComponent('solana_devnet'),\n  [SupportedChainId.SHARDEUM20]: encodeURIComponent('shardeum 2.0'),\n}\n\nexport { SUPPORTED_NETWORKS_NAMES }\n","import { useToast } from '@chakra-ui/react'\nimport { Metaplex, walletAdapterIdentity } from '@metaplex-foundation/js'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { clusterApiUrl, Connection, PublicKey } from '@solana/web3.js'\nimport { useCallback, useEffect, useState } from 'react'\n\nexport const getUrls = (network, sig, type) => {\n  if (network === 'devnet' || network === 9091) {\n    return {\n      rpc: clusterApiUrl('devnet'),\n      bundlrAddress: 'https://devnet.bundlr.network',\n      bundlrProviderUrl: clusterApiUrl('devnet'),\n      explorer: `https://solscan.io/${type}/${sig}?cluster=devnet`,\n    }\n  } else if (network === 'mainnet-beta' || network === 9090) {\n    return {\n      rpc: clusterApiUrl('mainnet-beta'),\n      bundlrAddress: 'https://node1.bundlr.network',\n      bundlrProviderUrl: clusterApiUrl('mainnet-beta'),\n      explorer: `https://solscan.io/${type}/${sig}`,\n    }\n  } else {\n    return {\n      rpc: 'http://127.0.0.1:8899',\n      bundlrAddress: 'https://devnet.bundlr.network',\n      bundlrProviderUrl: clusterApiUrl('devnet'),\n      explorer: `https://solscan.io/${type}/${sig}?cluster=custom`,\n    }\n  }\n}\n\nconst useMetaplex = (changed) => {\n  const walletAdapter = useWallet()\n  const toast = useToast()\n  const [network, setNetwork] = useState('')\n  const [metaplex, setMetaplex] = useState(null)\n\n  useEffect(() => {\n    const _network = localStorage.getItem('network') || 'devnet'\n    setNetwork(_network)\n    setMetaplex(\n      Metaplex.make(new Connection(getUrls(_network).rpc)).use(walletAdapterIdentity(walletAdapter)),\n      // .use(\n      //   bundlrStorage({\n      //     // @ts-ignore\n      //     address: getUrls(_network)?.bundlrAddress,\n      //     // @ts-ignore\n      //     providerUrl: getUrls(_network)?.rpc,\n      //     timeout: 60000,\n      //   }),\n      // ),\n    )\n  }, [walletAdapter])\n\n  const isV3 = useCallback((model) => {\n    return model === 'candyMachine' ? true : false\n  }, [])\n\n  const getCandyMachine = useCallback(\n    async (cmIdString) => {\n      const cmId = new PublicKey(cmIdString)\n      if (!metaplex) return null\n      try {\n        const _cm = await metaplex.candyMachines().findByAddress({ address: cmId })\n\n        toast({\n          title: 'candy machine v3',\n          status: 'success',\n          duration: 6000,\n        })\n        return _cm\n      } catch (error) {\n        try {\n          const _cm = await metaplex.candyMachinesV2().findByAddress({ address: cmId })\n          // toast({\n          //   title: 'candy machine v2',\n          //   status: 'success',\n          //   duration: 6000,\n          // })\n          return _cm\n        } catch (error) {\n          toast({\n            title: 'invalid cm',\n            description: 'provided id is neither cm v2 or v3.',\n            status: 'error',\n            duration: 6000,\n          })\n          throw error\n        }\n      }\n    },\n    [metaplex, toast],\n  )\n\n  return { metaplex, getCandyMachine, isV3, getUrls, network }\n}\n\nexport default useMetaplex\n","import { getAssociatedTokenAddress } from '@solana/spl-token'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js'\nimport { useEffect, useState } from 'react'\nimport useMetaplex from '../../../../hooks/useMetaplex'\nimport { getCollectionById } from '../../../../state/collection/source'\n\nconst useCollection = (collectionId, accessKey, collection) => {\n  const [collectionState, setCollectionState] = useState({})\n  const [candyMachineId, setCandyMachineId] = useState(null)\n  const [cm, setCm] = useState(null)\n  const { connection } = useConnection()\n  const walletAdapter = useWallet()\n\n  const [isLoading, setLoading] = useState(true)\n\n  const { getCandyMachine, metaplex, isV3, network } = useMetaplex()\n\n  useEffect(() => {\n    const { contractAddress, chainId, mintPrice, mintFunction = 'mint', abi } = collection\n\n    async function fetchCollection() {\n      try {\n        setLoading(true)\n        const collection = await getCollectionById(accessKey, collectionId)\n\n        setCollectionState({\n          contractAddress: collection?.contract?.contractAddress,\n          chainId: collection?.contract?.chainId,\n          mintPrice: collection.stats.price.value,\n          mintPriceUnit: collection.stats.price.unit,\n          mintFunction: collection.contract.mintFunction,\n          abi: collection.contract.abi,\n          profile: collection.profile,\n        })\n        setCandyMachineId(collection?.contract?.candyMachineId)\n      } catch (e) {\n        console.log(`Failed to fetch collection details from collection ID: ${collectionId}`)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    if (collectionId) {\n      fetchCollection()\n    } else {\n      setCollectionState({\n        contractAddress,\n        chainId,\n        mintPrice,\n        mintFunction,\n        abi,\n      })\n      setLoading(false)\n    }\n  }, [collectionId, accessKey, collection])\n\n  useEffect(() => {\n    async function fetchCandyMachineState() {\n      const cmId = candyMachineId\n\n      if (cmId && metaplex) {\n        try {\n          const _sm = await getCandyMachine(cmId)\n          const { ticker, price, buttonTitle, isButtonDisabled, tokenMint, tokenMintMetadata } = await getCmStates(\n            _sm,\n            connection,\n            isV3,\n            walletAdapter.publicKey,\n            metaplex,\n          )\n          setCollectionState((state) => ({\n            ...state,\n            mintPrice: price,\n            mintPriceUnit: ticker,\n          }))\n          setCm(_sm)\n        } catch (e) {\n          setLoading(false)\n          console.log(e)\n        }\n      }\n    }\n    fetchCandyMachineState()\n  }, [candyMachineId, getCandyMachine, metaplex, walletAdapter.publicKey])\n\n  return { collectionState, isLoading, cm }\n}\n\nconst getCmStates = async (_cm, connection, isV3, publicKey, metaplex) => {\n  let ticker = 'SOL',\n    price,\n    buttonTitle,\n    isButtonDisabled,\n    tokenMint,\n    tokenMintMetadata\n  // console.log(_cm);\n  if (isV3(_cm.model)) {\n    if (_cm.candyGuard.guards.solPayment) {\n      price = _cm.candyGuard.guards.solPayment.amount.basisPoints.toNumber() / LAMPORTS_PER_SOL\n\n      const _balance = await connection.getBalance(publicKey)\n      if (_balance <= _cm.candyGuard.guards.solPayment.amount.basisPoints.toNumber()) {\n        buttonTitle = 'Insufficient Balance'\n        isButtonDisabled = true\n      } else {\n        buttonTitle = 'Mint'\n        isButtonDisabled = false\n      }\n    }\n\n    if (_cm.candyGuard.guards.tokenPayment) {\n      price = _cm.candyGuard.guards.tokenPayment.amount.basisPoints.toNumber() / LAMPORTS_PER_SOL\n      const mint = _cm.candyGuard.guards.tokenPayment.mint\n      tokenMint = mint\n      const nft = await metaplex?.nfts().findByMint({\n        mintAddress: mint,\n      })\n      tokenMintMetadata = nft\n      ticker = nft.symbol.toLowerCase()\n      const tokenAccounts = await connection.getParsedTokenAccountsByOwner(publicKey, { mint: mint })\n      if (tokenAccounts.value.length === 0) {\n        buttonTitle = 'No Bonk Account'\n        isButtonDisabled = true\n      } else {\n        const tokenAccount = await getAssociatedTokenAddress(mint, publicKey)\n        const tokenBalance = await connection.getTokenAccountBalance(tokenAccount)\n        if (\n          tokenBalance.value.uiAmount <\n          _cm.candyGuard.guards.tokenPayment.amount.basisPoints.toNumber() / LAMPORTS_PER_SOL\n        ) {\n          buttonTitle = 'Insufficient Bonk Balance'\n          isButtonDisabled = true\n        } else {\n          buttonTitle = 'Mint'\n          isButtonDisabled = false\n        }\n      }\n    }\n  } else {\n    if (_cm.tokenMintAddress) {\n      tokenMint = _cm.tokenMintAddress\n\n      // console.log(_cm.tokenMintAddress);\n      const nft = await metaplex?.nfts().findByMint({ mintAddress: _cm.tokenMintAddress })\n      tokenMintMetadata = nft\n      // console.log(nft);\n      ticker = nft.symbol.toLowerCase()\n      const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n        publicKey,\n\n        { mint: _cm.tokenMintAddress },\n      )\n      if (tokenAccounts.value.length === 0) {\n        buttonTitle = 'No Bonk Account'\n        isButtonDisabled = true\n      } else {\n        price = _cm?.price.basisPoints.toNumber() / LAMPORTS_PER_SOL\n        const tokenAccount = await getAssociatedTokenAddress(_cm.tokenMintAddress, publicKey)\n        const tokenBalance = await connection.getTokenAccountBalance(tokenAccount)\n        if (tokenBalance.value.uiAmount < _cm?.price?.basisPoints.toNumber() / LAMPORTS_PER_SOL) {\n          buttonTitle = 'Insufficient Bonk Balance'\n          isButtonDisabled = true\n        } else {\n          buttonTitle = 'Mint'\n          isButtonDisabled = false\n        }\n      }\n    } else {\n      price = _cm?.price.basisPoints.toNumber() / LAMPORTS_PER_SOL\n      const _balance = await connection.getBalance(publicKey)\n      if (_balance <= _cm?.price.basisPoints.toNumber()) {\n        buttonTitle = 'Insufficient Bonk Balance'\n        isButtonDisabled = true\n      } else {\n        buttonTitle = 'Mint'\n        isButtonDisabled = false\n      }\n    }\n  }\n  return { ticker, price, buttonTitle, isButtonDisabled, tokenMint, tokenMintMetadata }\n}\n\nexport default useCollection\n","import styled from '@emotion/styled'\nimport { Box, Flex } from '@chakra-ui/react'\nimport { CloseIcon } from '@chakra-ui/icons'\n\nexport const BG = styled.div`\n  background: radial-gradient(50% 50% at 50% 50%, rgba(255, 255, 255, 0.45) 0%, rgba(255, 255, 255, 0.72) 100%);\n  width: 100vw;\n  height: 100vh;\n  z-index: 10;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  position: fixed;\n`\nexport const Centered = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\nexport const StyledModal = styled(Box)`\n  position: relative;\n  width: 350px;\n  min-height: 250px;\n  z-index: 10;\n  border-radius: 10px;\n  box-shadow: 0 0 30px -5px rgba(0, 0, 0, 0.3);\n  padding: 20px 20px 0 20px;\n  display: flex;\n  flex-direction: column;\n`\nexport const ModalFooter = styled(Flex)`\n  border-top: 1px solid ${({ theme }) => theme.colors.border};\n  align-items: center;\n  justify-content: center;\n  padding: 5px;\n  margin-top: 20px;\n  margin-top: auto;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  left: 0;\n  border-bottom-left-radius: 10px;\n  border-bottom-right-radius: 10px;\n`\nexport const StyledCloseIcon = styled(CloseIcon)`\n  position: absolute;\n  right: 5%;\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n  top: 27px;\n`\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { gnosisSafeConnection, networkConnection } from '../connection'\nimport { updateSelectedWallet } from '../state/user/reducer'\nimport { getConnection } from '../connection/utils'\n\nasync function connect(connector) {\n  try {\n    if (connector.connectEagerly) {\n      await connector.connectEagerly()\n    } else {\n      await connector.activate()\n    }\n  } catch (error) {\n    console.debug(`web3-react eager connection error: ${error}`)\n  }\n}\n\nexport default function useEagerlyConnect() {\n  const dispatch = useDispatch()\n\n  const selectedWallet = useSelector((state) => state.user.selectedWallet)\n\n  let selectedConnection\n  if (selectedWallet) {\n    try {\n      selectedConnection = getConnection(selectedWallet)\n    } catch {\n      dispatch(updateSelectedWallet({ wallet: undefined }))\n    }\n  }\n\n  useEffect(() => {\n    connect(gnosisSafeConnection.connector)\n    connect(networkConnection.connector)\n\n    if (selectedConnection) {\n      connect(selectedConnection.connector)\n    } // The dependency list is empty so this is only run once on mount\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n}\n","import { ConnectionType } from '../connection'\nimport { useMemo } from 'react'\nimport { getConnection } from '../connection/utils'\nimport { useSelector } from 'react-redux'\n\nconst SELECTABLE_WALLETS = [ConnectionType.INJECTED, ConnectionType.COINBASE_WALLET, ConnectionType.WALLET_CONNECT]\n\nexport default function useOrderedConnections() {\n  const selectedWallet = useSelector((state) => state.user.selectedWallet)\n  return useMemo(() => {\n    const orderedConnectionTypes = []\n\n    // Always attempt to use to Gnosis Safe first, as we can't know if we're in a SafeContext.\n    orderedConnectionTypes.push(ConnectionType.GNOSIS_SAFE)\n\n    // Add the `selectedWallet` to the top so it's prioritized, then add the other selectable wallets.\n    if (selectedWallet) {\n      orderedConnectionTypes.push(selectedWallet)\n    }\n    orderedConnectionTypes.push(...SELECTABLE_WALLETS.filter((wallet) => wallet !== selectedWallet))\n\n    // Add network connection last as it should be the fallback.\n    orderedConnectionTypes.push(ConnectionType.NETWORK)\n\n    return orderedConnectionTypes.map(getConnection)\n  }, [selectedWallet])\n}\n","import { useMemo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Web3ReactProvider } from '@web3-react/core'\n\nimport useEagerlyConnect from '../../hooks/useEagerlyConnect'\nimport useOrderedConnections from '../../hooks/useOrderedConnections'\nimport { getConnectionName } from '../../connection/utils'\n\nexport default function Web3Provider({ children }) {\n  const dispatch = useDispatch()\n\n  // Set metamask error handler for metamask disconnection warning modal.\n  // useEffect(() => {\n  //   setMetMaskErrorHandler((error) =>\n  //     dispatch(updateConnectionError({ connectionType: ConnectionType.INJECTED, error: error.message })),\n  //   )\n  // }, [dispatch])\n\n  useEagerlyConnect()\n  const connections = useOrderedConnections()\n  const connectors = connections.map(({ hooks, connector }) => [connector, hooks])\n\n  const key = useMemo(() => connections.map(({ type }) => getConnectionName(type)).join('-'), [connections])\n\n  return (\n    <Web3ReactProvider connectors={connectors} key={key}>\n      {children}\n    </Web3ReactProvider>\n  )\n}\n","import { useMemo } from 'react'\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\nimport { clusterApiUrl } from '@solana/web3.js'\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'\nimport { createDefaultAuthorizationResultCache, SolanaMobileWalletAdapter } from '@solana-mobile/wallet-adapter-mobile'\n\nconst SolanaProvider = ({ children }) => {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  const network = WalletAdapterNetwork.Devnet\n\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), [network])\n  const wallets = useMemo(\n    () => [\n      new SolanaMobileWalletAdapter({\n        appIdentity: { name: 'Solana Wallet Adapter App' },\n        authorizationResultCache: createDefaultAuthorizationResultCache(),\n      }),\n      new PhantomWalletAdapter(),\n    ],\n    [network],\n  )\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets}>{children}</WalletProvider>\n    </ConnectionProvider>\n  )\n}\n\nexport default SolanaProvider\n","import React from 'react'\n\nimport Web3Provider from '../../components/Web3Provider'\nimport SolanaProvider from '../../components/SolanaProvider'\n\nconst Providers = ({ children }) => {\n  return (\n    <SolanaProvider>\n      <Web3Provider>{children}</Web3Provider>\n    </SolanaProvider>\n  )\n}\n\nexport default Providers\n","import { Box, Flex, HStack, Image, Link, Tag, TagCloseButton, TagLabel, Text } from '@chakra-ui/react'\nimport { useWeb3React } from '@web3-react/core'\nimport React, { lazy, useState } from 'react'\n\nimport Loader from '../../components/Loader'\nimport { updateSelectedWallet } from '../../state/user/reducer'\nimport { truncateAddress } from '../../utils'\nimport useCollection from './Widget/hooks/useCollection'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { BG, Centered, ModalFooter, StyledCloseIcon, StyledModal } from './styles'\nimport Providers from './Providers'\n\nconst Widget = lazy(() => import('./Widget'))\nconst SolanaWalletModal = lazy(() => import('../../components/WalletModal/SolanaWalletModal'))\nconst WalletModal = lazy(() => import('../../components/WalletModal'))\nconst WelcomeScreen = lazy(() => import('./WelcomeScreen'))\n\nconst MintView = (props) => {\n  if (!props.mintOpen) {\n    return null\n  }\n  return (\n    <Providers>\n      <Mint {...props} />{' '}\n    </Providers>\n  )\n}\n\nconst Mint = ({ onClose, collectionId, accessKey, clientConfig, collection }) => {\n  const selectedWallet = useSelector((state) => state.user.selectedWallet)\n  const [showWallets, setShowWallets] = useState(false)\n  const { account, connector } = useWeb3React()\n  const { publicKey: solanaAccount, disconnect } = useWallet()\n  const { collectionState, isLoading, cm } = useCollection(collectionId, accessKey, collection)\n\n  const dispatch = useDispatch()\n\n  const { chainId } = collectionState\n\n  const onClickClose = () => {\n    if (!!onClose) {\n      onClose()\n    }\n    // parent.postMessage(\n    //   {\n    //     eventId: 'close-bandit-iframe',\n    //   },\n    //   '*',\n    // )\n  }\n\n  const onClickConnectWallet = () => {\n    setShowWallets(true)\n  }\n  const disconnectEvmWallet = () => {\n    try {\n      if (connector.deactivate) {\n        connector.deactivate()\n      } else {\n        connector.resetState()\n      }\n      dispatch(updateSelectedWallet({ wallet: undefined }))\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getLoadingScreen = () => {\n    return (\n      <Flex justify=\"center\" align=\"center\" height=\"250px\">\n        <Loader />\n      </Flex>\n    )\n  }\n  const getContent = () => {\n    const isSolana = [9090, 9091].includes(chainId)\n    if ((isSolana && solanaAccount) || (!isSolana && account)) {\n      return <Widget collectionState={collectionState} cm={cm} />\n    } else if (isSolana && !solanaAccount && showWallets) {\n      return <SolanaWalletModal />\n    } else if (!account && showWallets) {\n      return <WalletModal />\n    } else {\n      return <WelcomeScreen onClickConnectWallet={onClickConnectWallet} clientConfig={clientConfig} />\n    }\n  }\n\n  const isSolana = [9090, 9091].includes(chainId)\n\n  const solanaAccountStr = !!solanaAccount ? solanaAccount.toBase58() : ''\n\n  return (\n    <BG>\n      <Centered>\n        <StyledModal bg=\"background\">\n          {(isSolana ? solanaAccountStr : account) && (\n            <HStack mb={3} justify=\"flex-start\">\n              <Tag size={'lg'} key={'lg'} borderRadius=\"full\" variant=\"outline\" colorScheme=\"gray\">\n                <TagLabel>{isSolana ? truncateAddress(solanaAccountStr, 5) : truncateAddress(account, 5)}</TagLabel>\n                <TagCloseButton onClick={isSolana ? disconnect : disconnectEvmWallet} />\n              </Tag>\n            </HStack>\n          )}\n          <StyledCloseIcon onClick={onClickClose} />\n          <Box bg=\"background\" height=\"100%\" width=\"100%\" flex=\"1\" pb={'30px'}>\n            {isLoading && getLoadingScreen()}\n\n            {!isLoading && getContent()}\n          </Box>\n\n          <ModalFooter bg=\"background\">\n            <Flex alignItems=\"center\">\n              <Image src=\"/assets/images/bandit-B.png\" width={'15px'} height={'15px'} alt=\"\" />\n              <Link href={'/'}>\n                <Text fontSize={12} ml={1}>\n                  Powered by bandit.network\n                </Text>\n              </Link>\n            </Flex>\n          </ModalFooter>\n        </StyledModal>\n      </Centered>\n    </BG>\n  )\n}\n\nexport default MintView\n"],"names":["props","thickness","speed","emptyColor","color","size","ConnectionType","INJECTED","COINBASE_WALLET","WALLET_CONNECT","NETWORK","GNOSIS_SAFE","onError","error","console","debug","onMetamaskError","initializeConnector","actions","Network","urlMap","NETWORK_URLS","defaultChainId","networkConnection","connector","hooks","type","MetaMask","injectedConnection","GnosisSafe","gnosisSafeConnection","Object","entries","reduce","map","chainId","urls","WalletConnect","options","rpc","qrcode","walletConnectConnection","CoinbaseWallet","url","SupportedChainId","appName","appLogoUrl","reloadOnDisconnect","coinbaseWalletConnection","getIsInjected","window","Boolean","ethereum","getHasMetaMaskExtensionInstalled","isMetaMask","getHasCoinbaseExtensionInstalled","isCoinbaseWallet","getIsSolanaInjected","solana","getHasPhantomExtensionInstalled","isPhantom","CONNECTIONS","getConnection","c","connection","find","Error","getConnectionName","connectionType","hasMetaMaskExtension","SUPPORTED_NETWORKS_NAMES","SUPPORTED_NETWORKS_INFO","name","api","key","explorer","FALLBACK_URLS","CHAIN_IDS_TO_NAMES_URL_COMPONENT","encodeURIComponent","getUrls","network","sig","clusterApiUrl","bundlrAddress","bundlrProviderUrl","changed","walletAdapter","useWallet","toast","useToast","useState","setNetwork","metaplex","setMetaplex","useEffect","_network","localStorage","getItem","Metaplex","Connection","use","walletAdapterIdentity","isV3","useCallback","model","getCandyMachine","cmIdString","cmId","PublicKey","candyMachines","findByAddress","address","_cm","title","status","duration","candyMachinesV2","description","getCmStates","publicKey","ticker","candyGuard","guards","solPayment","price","amount","basisPoints","toNumber","LAMPORTS_PER_SOL","getBalance","buttonTitle","isButtonDisabled","tokenPayment","mint","tokenMint","nfts","findByMint","mintAddress","nft","tokenMintMetadata","symbol","toLowerCase","getParsedTokenAccountsByOwner","value","length","getAssociatedTokenAddress","tokenAccount","getTokenAccountBalance","uiAmount","tokenMintAddress","collectionId","accessKey","collection","collectionState","setCollectionState","candyMachineId","setCandyMachineId","cm","setCm","useConnection","isLoading","setLoading","useMetaplex","contractAddress","mintPrice","mintFunction","abi","getCollectionById","contract","stats","mintPriceUnit","unit","profile","log","fetchCollection","_sm","state","fetchCandyMachineState","BG","styled","Centered","StyledModal","Box","ModalFooter","Flex","theme","colors","border","StyledCloseIcon","CloseIcon","connect","connectEagerly","activate","SELECTABLE_WALLETS","Web3Provider","children","useDispatch","selectedConnection","dispatch","selectedWallet","useSelector","user","updateSelectedWallet","wallet","undefined","useEagerlyConnect","connections","useMemo","orderedConnectionTypes","push","filter","useOrderedConnections","connectors","join","Web3ReactProvider","WalletAdapterNetwork","endpoint","wallets","SolanaMobileWalletAdapter","appIdentity","authorizationResultCache","createDefaultAuthorizationResultCache","PhantomWalletAdapter","ConnectionProvider","WalletProvider","Widget","lazy","SolanaWalletModal","WalletModal","WelcomeScreen","Mint","onClose","clientConfig","showWallets","setShowWallets","useWeb3React","account","solanaAccount","disconnect","useCollection","onClickConnectWallet","isSolana","includes","solanaAccountStr","toBase58","bg","mb","justify","borderRadius","variant","colorScheme","truncateAddress","onClick","deactivate","resetState","e","height","width","flex","pb","align","Loader","getContent","alignItems","src","alt","href","fontSize","ml","mintOpen"],"sourceRoot":""}